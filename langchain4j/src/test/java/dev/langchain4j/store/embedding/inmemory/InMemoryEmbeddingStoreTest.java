package dev.langchain4j.store.embedding.inmemory;

import dev.langchain4j.data.document.Metadata;
import dev.langchain4j.data.embedding.Embedding;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.embedding.AllMiniLmL6V2QuantizedEmbeddingModel;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.store.embedding.EmbeddingMatch;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreWithFilteringIT;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

class InMemoryEmbeddingStoreTest extends EmbeddingStoreWithFilteringIT {

    @TempDir
    Path temporaryDirectory;

    EmbeddingStore<TextSegment> embeddingStore = new InMemoryEmbeddingStore<>();

    EmbeddingModel embeddingModel = new AllMiniLmL6V2QuantizedEmbeddingModel();

    @Test
    void should_serialize_to_and_deserialize_from_json() {

        InMemoryEmbeddingStore<TextSegment> originalEmbeddingStore = createEmbeddingStore();

        String json = originalEmbeddingStore.serializeToJson();
        InMemoryEmbeddingStore<TextSegment> deserializedEmbeddingStore = InMemoryEmbeddingStore.fromJson(json);

        assertThat(deserializedEmbeddingStore.entries).isEqualTo(originalEmbeddingStore.entries);
        assertThat(deserializedEmbeddingStore.entries).isInstanceOf(CopyOnWriteArrayList.class);
    }

    @Test
    void should_serialize_to_and_deserialize_from_file() {
        InMemoryEmbeddingStore<TextSegment> originalEmbeddingStore = createEmbeddingStore();
        Path filePath = temporaryDirectory.resolve("embedding-store.json");

        assertThatExceptionOfType(RuntimeException.class)
                .isThrownBy(() -> originalEmbeddingStore
                        .serializeToFile(temporaryDirectory.resolve("missing/store.json")))
                .withCauseInstanceOf(NoSuchFileException.class);

        assertThatExceptionOfType(RuntimeException.class)
                .isThrownBy(() -> InMemoryEmbeddingStore
                        .fromFile(temporaryDirectory.resolve("missing/store.json")))
                .withCauseInstanceOf(NoSuchFileException.class);
        assertThatExceptionOfType(RuntimeException.class)
                .isThrownBy(() -> InMemoryEmbeddingStore
                        .fromFile(temporaryDirectory.resolve("missing/store.json").toString()))
                .withCauseInstanceOf(NoSuchFileException.class);

        {
            originalEmbeddingStore.serializeToFile(filePath);
            InMemoryEmbeddingStore<TextSegment> deserializedEmbeddingStore = InMemoryEmbeddingStore.fromFile(filePath);

            assertThat(deserializedEmbeddingStore.entries)
                    .isEqualTo(originalEmbeddingStore.entries)
                    .hasSameHashCodeAs(originalEmbeddingStore.entries);
            assertThat(deserializedEmbeddingStore.entries).isInstanceOf(CopyOnWriteArrayList.class);
        }
        {
            originalEmbeddingStore.serializeToFile(filePath.toString());
            InMemoryEmbeddingStore<TextSegment> deserializedEmbeddingStore = InMemoryEmbeddingStore.fromFile(filePath);

            assertThat(deserializedEmbeddingStore.entries).isEqualTo(originalEmbeddingStore.entries);
            assertThat(deserializedEmbeddingStore.entries).isInstanceOf(CopyOnWriteArrayList.class);
        }
    }

    @Test
    void test_backwards_compatibility_with_0_27_1() {

        // given
        String json = "{\"entries\":[{\"id\":\"9f31aea1-c39a-4b73-b368-dca4ac22eda0\",\"embedding\":{\"vector\":[0.057201307,0.097976156,-0.06745427,-0.059016824,0.027524957,-0.06807618,0.020669876,0.033850566,0.034687445,-0.040490545,0.03045793,-0.06072373,0.027545251,-0.0074151377,0.021734795,-0.00839642,-0.022560772,0.06230256,-0.013116137,0.01655256,0.028359456,0.07251842,0.00599247,0.043110147,-0.014304514,0.07459548,-0.040274613,0.005124157,0.03886866,-0.018322365,0.08439111,0.1200504,0.069982134,0.03722165,0.06672163,0.026663033,0.024611466,0.077965766,0.022957068,-0.051209718,-0.06472792,0.010552233,-0.057209913,-0.0026194016,-0.0020028937,-0.01718271,0.023540089,-0.050186303,-0.046214227,0.03369072,-0.048578493,-0.033123475,-0.05132039,0.080034174,0.056925166,0.03781678,0.023713952,-0.023255358,0.0021637417,0.04742356,0.0014927451,0.0070022973,-0.0039822594,-0.013412115,-0.013808246,0.0745486,-0.046237603,-0.0416881,0.053262133,-0.016495204,0.053920645,-0.025394993,0.0042186505,-4.147767E-4,-0.022577304,0.03511629,5.070587E-4,0.025606658,0.04221684,-0.09970694,-0.025646126,0.024757504,0.03416705,0.06436623,0.020152286,-0.05685339,0.0731841,0.019278457,0.02475718,0.05147888,-0.07045386,-0.012282535,0.02931672,-0.07153368,-0.020643497,-0.07612133,0.012626986,-0.08861171,0.067663774,0.14053932,0.0029061853,-0.0033315988,-0.0524523,0.032786965,-0.040094074,0.020160805,0.009425372,-0.060076337,-0.039661527,0.053321593,0.038628604,0.05689778,-0.057897445,-0.09715632,0.013725121,-0.06837746,0.016972922,-0.052582484,0.024985695,0.007416031,-0.038997646,-0.019500792,-0.014070116,0.1437627,0.009556328,-0.008432037,-0.032148097,-1.7839896E-33,-0.002028897,-0.043809213,0.056407586,-0.051641434,0.012907637,0.02316771,0.026601193,-0.01551378,0.01664369,-0.06279467,0.022916041,0.020000348,0.018998647,-0.024048163,0.080970936,-0.034459032,0.007300408,0.08871231,-0.020748403,-0.005933055,-0.021545254,-0.03349244,-0.02646249,0.0024949447,0.084928066,0.020258978,-0.045914352,-0.07087895,0.018391058,0.0569282,-0.03789717,-0.02273117,0.15162005,0.013189745,-0.030049657,0.042957578,-0.040813994,0.023267176,0.0030064136,-0.035904303,0.11909954,-0.026664322,0.057273448,-0.04373812,-0.07382764,-0.045839965,-0.005056188,0.08175094,-0.036631025,-0.006067666,0.07806725,0.06630835,-0.019687586,-0.115966246,-0.085516356,-0.04843958,-0.061697885,-0.004999534,-0.030987244,0.010960663,-0.07078011,0.04653198,-0.022741215,0.067166284,-0.014658047,6.5748E-4,0.019268915,-0.070480645,0.0359062,-0.020858897,-0.100592636,0.011596522,-0.05492565,0.034224506,-0.009824681,-2.7691346E-4,-0.05726333,0.040958058,-0.0812173,-0.002825586,-0.057004385,0.024932696,-0.0075025638,0.023276236,0.0745798,-0.014672973,0.07498267,-0.035383858,-0.022080777,-0.043079637,-0.048208445,-0.07759584,-0.11293976,0.06459496,0.04191426,1.5481553E-34,0.047622494,-0.01070716,0.064020805,0.0076131998,-0.08706991,0.03676578,-0.0032307613,0.031294484,-0.08867712,0.059053622,-0.045690134,0.0077135675,-0.08196546,-0.038998336,0.0169787,-2.3814866E-4,-0.06341826,-0.04941549,0.0020103334,0.108358055,-0.019477485,-0.05750457,-0.026910579,0.0019134157,-0.03952732,0.047579005,-0.00473541,-0.0010997052,0.009325575,-0.011578981,-0.04880927,0.008855915,-0.05998971,-0.15609607,-0.06441175,0.003817021,-0.019360777,-0.030088088,0.004709309,-0.002944148,-0.011977208,0.07102894,-0.03193823,0.042242542,-0.066876166,-0.096367925,0.03844947,0.13394153,-0.066473685,-0.025763115,-0.05354682,0.045659956,-0.03569446,-0.037941854,-0.015122079,0.05307718,-0.08158317,0.0014787684,-0.013564072,0.0036179475,0.026201956,-0.038123026,-0.10278084,0.03453804,0.08838754,-0.040545594,-0.03343806,-0.06742089,-0.13013245,-0.0021091031,0.08794709,0.04200445,3.7793914E-4,-0.018091928,0.027789554,0.074590474,-0.034312785,-0.0130227255,0.019201595,0.04101676,0.07695457,0.016412959,0.04913328,0.010696734,0.06520121,0.023209795,-0.07345955,0.03444078,-0.050217725,-0.0556919,-0.014353299,0.009414133,-0.034478996,0.07603581,-0.022222584,-1.2650202E-8,-0.05439273,0.011756481,0.017452165,0.033803556,0.02265562,0.060457073,-0.025086865,0.015395766,0.04065299,-0.0035724393,0.056747418,-0.07523968,-0.13002348,0.04515734,-0.07929627,0.018349743,0.11428795,5.7841756E-4,-0.034205135,0.055738248,-0.14017463,0.034673855,-0.013863142,-0.034001946,0.06831545,-0.037001427,0.004022369,0.061996438,0.12361545,-0.011961576,0.08082159,0.019205514,0.062605225,0.121964194,0.038347147,-0.019524021,-0.060095485,0.03387935,-0.08967244,-0.049233563,0.09696744,8.211608E-4,0.0015214183,-0.009577058,0.026671257,0.075709656,-0.011034288,0.019120142,0.0040672733,0.0024790403,-0.03927055,-0.027790904,-0.008288951,0.041439142,-0.045515023,-0.020228527,0.04923804,0.013510735,0.046275977,0.011542801,0.023042277,-0.033489324,-0.053267572,-0.012159528]},\"embedded\":{\"text\":\"segment without metadata\",\"metadata\":{\"metadata\":{}}}},{\"id\":\"d5bf91a0-114f-47bb-b002-c356055fef4c\",\"embedding\":{\"vector\":[0.07537167,0.09377415,-0.04982042,-0.08121663,0.015574025,-0.058796126,0.06592989,0.05037858,0.002545316,-0.027136235,0.0049845017,-0.08074197,0.03123571,0.005172032,0.030327432,0.013308277,-0.050910592,0.0574984,-0.034333028,0.032349683,0.050055083,0.07333443,0.0048888833,0.030339964,-0.02672717,0.085237645,-0.05234597,0.013654474,0.040758226,-0.0075032944,0.087115385,0.103919216,0.064234294,0.059987076,0.047008432,0.034740463,0.007913107,0.055483095,0.015264154,-0.01931788,-0.047386106,-0.018762415,-0.02641716,-0.02268846,-0.024817172,-0.015258992,0.010224651,-0.022648437,-0.018112076,0.058505286,-0.061072517,-0.039503697,-0.049853012,0.10070167,0.055298924,0.06322311,6.845492E-4,-0.057664458,0.0015421847,0.021933548,7.963145E-4,-0.0059904614,-0.0135710295,-0.0019550214,0.017834358,0.04741201,-0.058375597,-0.06904114,0.0056988276,-0.030821789,0.04255459,-0.032651562,0.012973757,-0.013484678,-0.026609216,0.041761927,-0.001819502,0.024001166,0.041914117,-0.15872808,0.009135047,0.036010742,0.026380068,0.04661394,0.040776167,-0.09694139,0.051645063,-0.012115254,0.0011670754,0.08002232,-0.02340566,-0.009670775,0.026742268,-0.053570155,-0.034546606,-0.044903945,0.010353379,-0.09050658,0.09412789,0.13243115,0.014936864,-0.0020607754,-0.076716155,0.030225208,-0.03893138,-0.01824456,7.0950575E-4,-0.05563363,-0.056433976,0.060696073,0.046944067,0.066769585,-0.08001939,-0.08933798,0.021180836,-0.047758013,-0.0019033102,-0.038017284,0.040623263,-0.009476703,-0.03986417,-0.01104229,-0.059105396,0.13079539,0.018397508,-0.025256645,-0.048903655,-3.9268877E-33,-0.006797204,-0.05309575,0.07164487,-0.026057579,0.0017996844,0.0028719113,-0.006816514,0.005140215,-0.01997709,-0.06730936,0.009071873,0.0029209459,0.0034706136,-0.028543329,0.05186361,-0.03947713,-0.0043351734,0.1053097,-0.07629204,0.025908867,-0.020793576,-0.053498257,-0.010309091,0.014000388,0.07663225,0.022763709,-0.057230692,-0.07043246,0.027851067,0.04845714,-0.034436848,-0.017671665,0.14125548,0.00848027,-0.02046977,0.041086536,-0.0051212627,0.03270988,0.0027094528,-0.04450429,0.09533736,0.00583405,0.073324196,-0.052166563,-0.079627454,-0.012794298,-0.020235647,0.09106377,-0.026533237,0.025555182,0.08292512,0.02463214,-0.018112918,-0.083395764,-0.03836336,-0.03565279,-0.07762907,0.025247822,-0.026934177,0.028717838,-0.046074107,0.04157196,-0.001488384,0.045161806,-0.0079842,0.03053195,0.045754418,-0.06031116,0.041362632,0.020271355,-0.11227066,0.026512232,-0.051491555,0.058037944,-0.012839117,0.017854113,-0.034826808,0.016243163,-0.093936235,-0.0046335496,-0.10306922,0.057637613,-0.023139,0.00524473,0.02146113,0.004931881,0.06672715,-0.048161875,-0.033301048,-0.04732256,-0.027075278,-0.054853585,-0.06548386,0.06454165,0.035115376,1.2037326E-33,0.05167523,0.012492563,0.07631539,0.0043437197,-0.060383454,0.0062329145,-0.018349981,0.06950817,-0.1066819,0.07403314,-0.040331263,8.4718474E-4,-0.09369465,-0.051024787,0.028136669,-0.039166775,-0.034350272,-0.06200259,0.029603729,0.11203197,-0.010644153,-0.041022625,-0.042802382,0.009265621,-0.01954659,0.036926806,0.026126688,-0.02409088,0.025817502,-0.020298721,-0.053780533,-0.019591691,-0.059663534,-0.10094154,-0.03670537,-0.017844127,-0.014558001,-0.06693278,0.0196587,-0.0021979597,0.006506514,0.043996792,-0.025459062,0.04217443,-0.059357535,-0.10044894,0.051685486,0.16311784,-0.061564784,-0.046107642,-0.039094687,0.033122245,-0.029844237,-0.016163545,-0.018609496,0.04986875,-0.086634174,-0.03720164,-0.04854007,-0.01165759,-0.01671681,-0.012094196,-0.05797042,0.03400806,0.08754082,-0.066172466,-0.036874656,-0.110341795,-0.14026468,0.019234149,0.08240901,0.028232172,0.012659509,6.246022E-4,0.0334477,0.049814127,-0.017460424,-0.011115224,0.018264426,0.069536105,0.052651975,0.03804775,0.065371215,0.0271623,0.030751852,0.033619456,-0.03202146,0.07123094,-0.06346752,-0.04183024,-0.040737044,-0.0031132766,-0.026472421,0.072086886,-0.04940534,-1.2209382E-8,-0.07841626,0.003760722,-0.026774717,0.02215555,0.014349737,0.08569418,-0.054419365,0.0017974338,0.04279314,-0.009899819,0.069076024,-0.04906003,-0.11451777,0.014597635,-0.089398235,5.640443E-4,0.08698881,-0.0013748041,-0.02389528,0.053391792,-0.10307714,0.027230544,0.0033528612,-0.052939977,0.05495216,-0.019109974,-0.0125621,0.08359316,0.0968435,-0.023252375,0.07599164,0.01822297,0.04307389,0.123047635,0.04079979,-0.053836625,-0.056320403,0.017657004,-0.054714896,-0.05295102,0.121165335,-0.023906661,-0.025332425,-0.019583883,0.043724045,0.09436279,-0.0058187237,0.051047623,0.0060970546,4.5608068E-4,-0.051518943,-0.03483301,0.013320532,0.02657051,-0.04677969,-0.039062973,0.010366545,0.005737323,0.029103348,-0.0057121087,0.0096291825,-0.018841488,-0.052606933,0.008050286]},\"embedded\":{\"text\":\"segment with metadata\",\"metadata\":{\"metadata\":{\"key\":\"value\"}}}},{\"id\":\"123-456\",\"embedding\":{\"vector\":[0.01427534,0.1135423,-0.0057996903,-0.04835215,0.021885576,0.015496537,0.13234325,0.026569638,0.024037533,-0.07230443,0.005669226,-0.02057972,0.003881205,-0.044605326,-0.0036313264,-0.02661889,-0.083701,0.0249354,-0.066247374,-0.023692247,-0.002687209,0.10530344,-0.02034765,0.052967783,-0.043245524,0.036525913,0.09285917,-0.0011312622,0.008854066,-0.025035923,0.08325782,0.026001079,0.07515762,-0.059363328,0.008307399,-0.07049897,0.012785212,0.008714783,0.081946716,0.02202002,-0.052301284,-0.042489372,0.009468868,0.02338388,0.045726452,0.022563402,-0.04466161,0.0854926,0.014746384,0.0032277561,-0.05837443,0.0030582817,-0.019891014,0.048374847,0.057789374,0.027603388,-0.034763176,-0.014946974,0.06783286,0.08000838,0.07362065,-0.04754493,0.11138661,-0.014177969,-0.009395498,-0.050724253,-0.020360691,-0.03293448,-0.021366054,-0.035180166,0.04871407,0.046761397,0.0221221,-0.007463731,-0.004575534,-0.02482965,0.037872616,-0.026876044,0.030946694,-0.04644185,-0.0674159,0.014245121,0.035556607,0.0074684233,0.05409628,-0.036085546,0.0059632836,0.01753833,0.013818746,0.065763265,-0.033747267,0.031177642,-0.028111435,-0.040638737,0.09231343,-0.06742389,0.06359382,-0.045942914,0.078532,0.09951645,-0.05325532,0.05619748,-0.09021957,0.00457413,-0.04123888,0.010642849,0.021251304,-0.0067872126,-0.026109936,-0.0058369827,0.0013914867,0.015323047,0.023634782,0.021483103,0.035943016,-0.107872844,0.050153267,0.010334472,0.05942027,-0.0031132186,0.024804423,-0.008089535,-0.075059235,0.15455434,-0.03536915,0.011583006,0.010217871,-4.5187083E-33,-0.015845826,-0.07726016,0.0055745095,-0.032361493,-0.035082962,-0.034175094,-0.09210432,-0.022536896,-0.048198193,0.005163736,-0.069776125,-0.07117907,0.026773319,-0.0011613831,0.06483769,-2.447381E-4,0.0060205124,0.06649134,-0.09293694,-0.076393254,-0.110191435,-0.061721,-0.026869358,-0.010975172,0.0896893,0.006572341,0.0031138926,-0.07591507,0.040947873,-0.0027509013,-0.044632003,-0.008514236,0.017083755,-0.043821834,-0.03092553,0.09509282,-0.013393654,0.025339061,-0.027164645,-0.0059746034,0.04695181,0.0069232755,0.03482498,0.037532207,-0.06620259,-0.008433412,0.07597766,0.041640013,-0.09103248,0.010787648,-0.029509524,0.0026140802,0.0053777313,-0.06770447,-0.063072845,-0.063689224,-0.048963923,0.060782857,-0.03349049,0.020915518,-0.007516321,0.046279136,-0.049857527,0.073196255,-0.03119207,0.013654012,0.015693555,-0.039771784,0.05653789,0.02349848,-0.053455137,-0.070485316,-0.026318414,0.045815945,-0.069623984,-0.009835361,-0.039246157,0.059903674,-0.048860047,-0.004842233,-0.065787815,0.020712007,-0.044092644,-0.051267337,0.090919994,0.0847426,0.05096704,0.007669294,-0.04200364,-7.5258245E-4,-0.08086066,-0.045553472,-0.014694621,0.09608746,0.085956454,1.9839545E-33,0.020986065,0.063398145,0.052699536,-0.050582908,-0.056175083,-0.033786587,0.00755879,0.0028816855,-0.13275348,0.017613003,-0.0018933298,-0.025705865,-0.01300761,0.03157806,0.12297093,-0.046856783,-0.040002003,-0.020585487,-0.015993807,0.08610964,-0.016965605,-0.029378574,-0.006984572,-0.033569757,-0.09606532,0.05192966,0.046319954,-0.0071525644,-0.03646693,-0.06645488,8.537594E-4,-0.028260633,-0.06032046,0.010788948,-0.02512315,0.024306621,-0.012426024,-0.07053519,0.056101672,-0.01772062,0.015096035,0.022908827,0.042602338,0.14488354,-0.05156782,-0.04293867,0.113020614,0.13485749,-0.112286,0.0013046217,-0.11321065,0.07738234,0.0017404524,-0.017842876,0.03205514,-0.0116315,-0.11460257,0.017602112,-0.06462552,-0.018528963,0.046766475,0.04454178,-0.023564769,0.071281336,0.100670226,-0.0749631,0.026817208,-0.045921326,-0.09412383,0.0012255247,0.036448978,0.055593498,0.05184524,-0.019553479,-0.030268291,-0.028783659,-0.078283414,0.05735436,0.01724517,0.08747575,0.047078103,0.0043212096,0.052257556,-0.0142459385,-0.019969648,-6.1846804E-5,0.06436687,0.052061144,-0.060703434,-0.024660125,-0.049241737,0.009531117,-0.019484416,-0.0035966795,-0.030918736,-1.2166098E-8,-0.050633337,0.004881692,-0.028406022,-0.06265527,0.064385734,0.03177968,-0.1479285,-0.0073799477,0.019165257,-0.021440892,0.01916768,-0.05752381,-0.026842557,-0.031983808,-0.06569626,-0.04753799,-0.009097504,-0.0071637244,0.020231083,0.058378525,-0.067783624,-0.02162054,-0.0085469885,-0.030462641,0.023279581,-0.07284934,0.018004939,-0.0074201156,0.07441733,-0.034400202,-0.021721765,0.036967926,0.052939128,0.09989442,0.10793719,-0.061688866,-0.006804839,0.037365176,0.028154155,-0.025663588,0.055129454,-0.060469735,0.07553883,-0.033263452,-0.019321803,0.03748202,-0.012784969,-0.0016439215,-0.0066069034,0.0436309,-0.010036886,-0.07903514,0.10671815,0.015433326,-0.031775687,-0.033961914,0.0126630915,0.0071017,0.032530855,0.06524157,-0.0016412673,0.02854944,-0.045584686,-0.040324535]},\"embedded\":{\"text\":\"segment with id\",\"metadata\":{\"metadata\":{}}}}]}\n";

        // when
        EmbeddingStore<TextSegment> deserializedEmbeddingStore = InMemoryEmbeddingStore.fromJson(json);
        List<EmbeddingMatch<TextSegment>> matches = deserializedEmbeddingStore.findRelevant(
                embeddingModel.embed("test").content(), 100);
        List<TextSegment> segments = matches.stream().map(EmbeddingMatch::embedded).collect(toList());

        // then
        assertThat(matches).hasSize(3);
        assertThat(segments).containsExactlyInAnyOrder(
                TextSegment.from("segment without metadata"),
                TextSegment.from("segment with metadata", Metadata.from("key", "value")),
                TextSegment.from("segment with id")
        );

        assertThat(matches.stream()
                .filter(match -> match.embeddingId().equals("123-456"))
                .map(EmbeddingMatch::embedded)
                .collect(toList())).containsExactly(TextSegment.from("segment with id"));
    }

    private InMemoryEmbeddingStore<TextSegment> createEmbeddingStore() {

        InMemoryEmbeddingStore<TextSegment> embeddingStore = new InMemoryEmbeddingStore<>();

        TextSegment segment = TextSegment.from("first");
        Embedding embedding = embeddingModel.embed(segment).content();
        embeddingStore.add(embedding, segment);

        TextSegment segmentWithMetadata = TextSegment.from("second", Metadata.from("key", "value"));
        Embedding embedding2 = embeddingModel.embed(segmentWithMetadata).content();
        embeddingStore.add(embedding2, segmentWithMetadata);

        return embeddingStore;
    }

    @Override
    protected EmbeddingStore<TextSegment> embeddingStore() {
        return embeddingStore;
    }

    @Override
    protected EmbeddingModel embeddingModel() {
        return embeddingModel;
    }
}
